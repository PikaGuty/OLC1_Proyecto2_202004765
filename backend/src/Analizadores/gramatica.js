/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,17],$V2=[1,18],$V3=[1,37],$V4=[1,38],$V5=[1,39],$V6=[1,40],$V7=[1,41],$V8=[1,42],$V9=[1,43],$Va=[1,44],$Vb=[1,45],$Vc=[1,46],$Vd=[1,47],$Ve=[1,48],$Vf=[1,27],$Vg=[1,49],$Vh=[1,50],$Vi=[1,28],$Vj=[1,29],$Vk=[1,30],$Vl=[1,31],$Vm=[1,32],$Vn=[1,33],$Vo=[1,34],$Vp=[1,35],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,36],$Vy=[5,19,20,28,29,30,31,32,36,40,42,51,52,53,54,55,56,57,81,83,85,89,90,91,92,93,94,99,100,101,102,103,104,105,106,107,108],$Vz=[34,35,36,37,38,39,43,44,45,46,47,48,49,50,76,77,79],$VA=[2,65],$VB=[2,64],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[1,99],$VO=[1,100],$VP=[1,101],$VQ=[1,86],$VR=[1,87],$VS=[1,102],$VT=[2,52],$VU=[1,104],$VV=[1,112],$VW=[41,55,71,82],$VX=[8,34,35,36,37,38,39,41,43,44,45,46,47,48,49,50,69,72,76,77,79,80],$VY=[8,69],$VZ=[2,75],$V_=[1,132],$V$=[2,25],$V01=[1,165],$V11=[8,34,35,36,37,38,39,41,43,44,45,46,47,48,49,50,69,72,79,80],$V21=[8,41,49,50,69,72,79,80],$V31=[1,178],$V41=[8,35,36,37,38,39,41,43,44,45,46,47,48,49,50,69,72,79,80],$V51=[8,35,36,41,43,44,45,46,47,48,49,50,69,72,79,80],$V61=[8,41,43,44,45,46,47,48,49,50,69,72,79,80],$V71=[2,116],$V81=[41,69],$V91=[2,86],$Va1=[1,244],$Vb1=[1,243],$Vc1=[83,89,90],$Vd1=[1,274],$Ve1=[69,72],$Vf1=[2,87];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"PTCOMA":8,"inc_dec":9,"dec_vectores":10,"mod_vectores":11,"sen_if":12,"asig_solo":13,"sen_switch":14,"sen_while":15,"sen_for":16,"sen_dowhile":17,"sen_return":18,"R_BREAK":19,"R_CONTINUE":20,"metodos":21,"funcion":22,"llamada":23,"fprint":24,"fprintln":25,"frun":26,"tipo":27,"R_INT":28,"R_DOUBLE":29,"R_BOOLEAN":30,"R_CHAR":31,"R_STRING":32,"expresion":33,"POTENCIA":34,"MAS":35,"MENOS":36,"POR":37,"DIV":38,"MODULO":39,"PARIZQ":40,"PARDER":41,"DIF":42,"IGUALACION":43,"DIFERENCIACION":44,"MENIGUALQ":45,"MAYIGUALQ":46,"MENORQ":47,"MAYORQ":48,"OR":49,"AND":50,"ENTERO":51,"DECIMAL":52,"R_TRUE":53,"R_FALSE":54,"IDENTIFICADOR":55,"CARACTER":56,"CADENA":57,"acs_vectores":58,"casteo":59,"ftolower":60,"ftoupper":61,"fround":62,"flength":63,"ftypeof":64,"ftostring":65,"ftochararray":66,"terna":67,"lista":68,"COMA":69,"listavec":70,"CORIZQ":71,"CORDER":72,"dec":73,"asig":74,"IGUAL":75,"INCRE":76,"DECRE":77,"R_NEW":78,"INTERROG":79,"DOSPTS":80,"R_IF":81,"LLAVIZQ":82,"LLAVDER":83,"R_ELSE":84,"R_SWITCH":85,"list_case":86,"s_default":87,"s_case":88,"R_CASE":89,"R_DEFAULT":90,"R_WHILE":91,"R_FOR":92,"R_DO":93,"R_RETURN":94,"parametros":95,"parmetro":96,"R_VOID":97,"parametros_llamada":98,"R_PRINT":99,"R_PRINTLN":100,"R_TOLOWER":101,"R_TOUPPER":102,"R_ROUND":103,"R_LENGTH":104,"R_TYPEOF":105,"R_TOSTRING":106,"R_TOCHARARRAY":107,"R_RUN":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PTCOMA",19:"R_BREAK",20:"R_CONTINUE",28:"R_INT",29:"R_DOUBLE",30:"R_BOOLEAN",31:"R_CHAR",32:"R_STRING",34:"POTENCIA",35:"MAS",36:"MENOS",37:"POR",38:"DIV",39:"MODULO",40:"PARIZQ",41:"PARDER",42:"DIF",43:"IGUALACION",44:"DIFERENCIACION",45:"MENIGUALQ",46:"MAYIGUALQ",47:"MENORQ",48:"MAYORQ",49:"OR",50:"AND",51:"ENTERO",52:"DECIMAL",53:"R_TRUE",54:"R_FALSE",55:"IDENTIFICADOR",56:"CARACTER",57:"CADENA",69:"COMA",71:"CORIZQ",72:"CORDER",75:"IGUAL",76:"INCRE",77:"DECRE",78:"R_NEW",79:"INTERROG",80:"DOSPTS",81:"R_IF",82:"LLAVIZQ",83:"LLAVDER",84:"R_ELSE",85:"R_SWITCH",89:"R_CASE",90:"R_DEFAULT",91:"R_WHILE",92:"R_FOR",93:"R_DO",94:"R_RETURN",97:"R_VOID",99:"R_PRINT",100:"R_PRINTLN",101:"R_TOLOWER",102:"R_TOUPPER",103:"R_ROUND",104:"R_LENGTH",105:"R_TYPEOF",106:"R_TOSTRING",107:"R_TOCHARARRAY",108:"R_RUN"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,0],[27,1],[27,1],[27,1],[27,1],[27,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,3],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[68,3],[68,1],[70,5],[70,3],[7,2],[73,3],[73,1],[74,3],[74,1],[13,3],[59,4],[9,2],[9,2],[10,10],[10,15],[10,8],[10,10],[10,6],[10,10],[58,4],[58,7],[11,6],[11,9],[67,5],[12,7],[12,11],[12,9],[14,8],[14,7],[14,7],[86,2],[86,1],[88,4],[87,3],[15,7],[16,11],[16,11],[17,8],[18,2],[22,9],[22,8],[95,3],[95,1],[95,0],[96,2],[21,7],[21,9],[21,6],[21,8],[23,3],[23,4],[98,3],[98,1],[24,4],[25,4],[60,4],[61,4],[62,4],[63,4],[64,4],[65,4],[66,4],[26,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=new nodo("Raiz","Raiz",this.$first_line,_$[$0-1].last_column); this.$.addHijos($$[$0-1]); return this.$;
break;
case 3: case 97:
$$[$0-1].addHijos($$[$0]); this.$=$$[$0-1];
break;
case 4:
this.$= new nodo("Instrucciones","Instrucciones",this._$.first_line,_$[$0].last_column); this.$.addHijos($$[$0]);
break;
case 5:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 6: case 7: case 8: case 9: case 11: case 15: case 16: case 21: case 22: case 23: case 24: case 38:
this.$=$$[$0-1]
break;
case 10: case 12: case 13: case 14: case 19: case 20: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66:
this.$=$$[$0]
break;
case 17:
this.$= new nodo("Break",$$[$0-1],this._$.first_line,_$[$0-1].last_column);
break;
case 18:
this.$= new nodo("Continue",$$[$0-1],this._$.first_line,_$[$0-1].last_column);
break;
case 26:
this.$= new nodo("Tipo","Int",this._$.first_line,_$[$0].last_column);
break;
case 27:
this.$= new nodo("Tipo","Double",this._$.first_line,_$[$0].last_column);
break;
case 28:
this.$= new nodo("Tipo","Boolean",this._$.first_line,_$[$0].last_column);
break;
case 29:
this.$= new nodo("Tipo","Char",this._$.first_line,_$[$0].last_column);
break;
case 30:
this.$= new nodo("Tipo","String",this._$.first_line,_$[$0].last_column);
break;
case 31: case 32: case 33: case 34: case 35: case 36:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0-1].last_column);this.$.addHijos($$[$0-2],new nodo("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 37:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("op",$$[$0-1],this._$.first_line,_$[$0].last_column),$$[$0]);
break;
case 39:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("op_log",$$[$0-1],this._$.first_line,_$[$0].last_column),$$[$0]);
break;
case 40: case 41: case 42: case 43: case 44: case 45:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0-1].last_column);this.$.addHijos($$[$0-2],new nodo("op_rel",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 46: case 47:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0-1].last_column);this.$.addHijos($$[$0-2],new nodo("op_log",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 48:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("entero",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 49:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("decimal",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 50:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("true",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 51:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("false",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 52:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("id",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 53:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("caracter",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 54:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);
    var cad= $$[$0].substr(0,$$[$0].length);
    cad=cad.replace(/\\n/g,"\n");
    cad=cad.replace(/\\t/g,"\t");
    cad=cad.replace(/\\r/g,"\r");
    cad=cad.replace(/\\\\/g,"\\");
    cad=cad.replace(/\\\"/g,"\"");
    cad=cad.replace(/\\\'/g,"\'");
    this.$.addHijos(new nodo("cadena",cad,this._$.first_line,_$[$0].last_column));
break;
case 67: case 72: case 108: case 118:
$$[$0-2].addHijos($$[$0]); this.$=$$[$0-2];
break;
case 68:
this.$= new nodo("ListVec1","ListVec1",this._$.first_line,_$[$0].last_column); this.$.addHijos($$[$0]);
break;
case 69:
$$[$0-4].addHijos($$[$0-1]); this.$=$$[$0-4];
break;
case 70:
this.$= new nodo("ListVec2","ListVec2",this._$.first_line,_$[$0-2].last_column); this.$.addHijos($$[$0-1]);
break;
case 71:
this.$= new nodo("Var","Var",this._$.first_line,_$[$0-1].last_column); this.$.addHijos($$[$0-1],$$[$0]);
break;
case 73:
this.$= new nodo("Dec","Dec"); this.$.addHijos($$[$0])
break;
case 74: case 76:
this.$= new nodo("Asig","Asig"); this.$.addHijos(new nodo("id",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0])
break;
case 75:
this.$=new nodo("id",$$[$0],this._$.first_line,_$[$0].last_column)
break;
case 77:
this.$= new nodo("Cast","Cast"); this.$.addHijos($$[$0-2],$$[$0])
break;
case 78:
this.$= new nodo("Incr","Incr"); this.$.addHijos($$[$0-1])
break;
case 79:
this.$= new nodo("Decr","Decr"); this.$.addHijos($$[$0-1])
break;
case 80:
this.$= new nodo("DecVec1","DecVec1"); this.$.addHijos($$[$0-9],new nodo("id",$$[$0-8],this._$.first_line,_$[$0-9].last_column),$$[$0-3],$$[$0-1])
break;
case 81:
this.$= new nodo("DecVec2","DecVec2"); this.$.addHijos($$[$0-14],new nodo("id",$$[$0-13],this._$.first_line,_$[$0-14].last_column),$$[$0-6],$$[$0-4],$$[$0-1])
break;
case 82:
this.$= new nodo("DecVec1","DecVec1"); this.$.addHijos($$[$0-7],new nodo("id",$$[$0-6],this._$.first_line,_$[$0-7].last_column),$$[$0-1])
break;
case 83:
this.$= new nodo("DecVec2","DecVec2"); this.$.addHijos($$[$0-9],new nodo("id",$$[$0-8],this._$.first_line,_$[$0-9].last_column),$$[$0-1])
break;
case 84:
this.$= new nodo("DecVec1","DecVec1"); this.$.addHijos($$[$0-5],new nodo("id",$$[$0-4],this._$.first_line,_$[$0-5].last_column),$$[$0])
break;
case 85:
this.$= new nodo("DecVec1","DecVec1"); this.$.addHijos($$[$0-9],new nodo("id",$$[$0-8],this._$.first_line,_$[$0-9].last_column),$$[$0-1])
break;
case 86:
this.$= new nodo("acsVec1","acsVec1"); this.$.addHijos(new nodo("id",$$[$0-3],this._$.first_line,_$[$0-3].last_column),$$[$0-1])
break;
case 87:
this.$= new nodo("acsVec2","acsVec2"); this.$.addHijos(new nodo("id",$$[$0-6],this._$.first_line,_$[$0-6].last_column),$$[$0-4],$$[$0-1])
break;
case 88:
this.$= new nodo("modVec1","modVec1"); this.$.addHijos(new nodo("id",$$[$0-5],this._$.first_line,_$[$0-5].last_column),$$[$0-3],$$[$0])
break;
case 89:
this.$= new nodo("modVec2","modVec2"); this.$.addHijos(new nodo("id",$$[$0-8],this._$.first_line,_$[$0-8].last_column),$$[$0-6],$$[$0-3],$$[$0])
break;
case 90:
this.$= new nodo("Terna","Terna"); this.$.addHijos($$[$0-4],$$[$0-2],$$[$0])
break;
case 91:
this.$= new nodo("CIf","CIf"); this.$.addHijos($$[$0-4],$$[$0-1])
break;
case 92:
this.$= new nodo("CIf","CIf"); $$[$0-3]=new nodo("CElse","CElse"); this.$.addHijos($$[$0-8],$$[$0-5],$$[$0-3]); $$[$0-3].addHijos($$[$0-1]);
break;
case 93:
this.$= new nodo("CIf","CIf"); $$[$0-1]=new nodo("CElse","CElse"); this.$.addHijos($$[$0-6],$$[$0-3],$$[$0-1]); $$[$0-1].addHijos($$[$0]);
break;
case 94:
this.$= new nodo("CSwitch","CSwitch"); this.$.addHijos($$[$0-5],$$[$0-2],$$[$0-1])
break;
case 95: case 96:
this.$= new nodo("CSwitch","CSwitch"); this.$.addHijos($$[$0-4],$$[$0-1])
break;
case 98:
this.$= new nodo("ListCase","ListCase",this._$.first_line,_$[$0].last_column); this.$.addHijos($$[$0]);
break;
case 99:
this.$= new nodo("SCase","SCase"); this.$.addHijos($$[$0-2],$$[$0])
break;
case 100:
this.$= new nodo("SDefault","SDefault"); this.$.addHijos($$[$0]);
break;
case 101:
this.$= new nodo("SWhile","SWhile"); this.$.addHijos($$[$0-4],$$[$0-1]);
break;
case 102: case 103:
this.$= new nodo("SFor","SFor"); this.$.addHijos($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 104:
this.$= new nodo("SDoWhile","SDoWhile"); this.$.addHijos($$[$0-5],$$[$0-1]);
break;
case 105:
this.$= new nodo("SReturn","SReturn"); this.$.addHijos($$[$0]);
break;
case 106:
this.$= new nodo("SFuncion","SFuncion"); this.$.addHijos(new nodo("id",$$[$0-8],this._$.first_line,_$[$0-8].last_column),$$[$0-6],$$[$0-3],$$[$0-1]);
break;
case 107:
this.$= new nodo("SFuncion","SFuncion"); this.$.addHijos(new nodo("id",$$[$0-7],this._$.first_line,_$[$0-7].last_column),$$[$0-3],$$[$0-1]);
break;
case 109:
this.$= new nodo("FParametros","FParametros");  this.$.addHijos($$[$0])
break;
case 111:
this.$= new nodo("FPmt","FPmt");  this.$.addHijos($$[$0-1],new nodo("id",$$[$0],this._$.first_line,_$[$0-1].last_column))
break;
case 112:
this.$= new nodo("SMetodo","SMetodo"); this.$.addHijos(new nodo("id",$$[$0-6],this._$.first_line,_$[$0-6].last_column),$$[$0-4],$$[$0-1]);
break;
case 113:
this.$= new nodo("SMetodo","SMetodo"); this.$.addHijos(new nodo("id",$$[$0-8],this._$.first_line,_$[$0-8].last_column),$$[$0-6],$$[$0-1]);
break;
case 114:
this.$= new nodo("SMetodo","SMetodo"); this.$.addHijos(new nodo("id",$$[$0-5],this._$.first_line,_$[$0-5].last_column),$$[$0-1]);
break;
case 115:
this.$= new nodo("SMetodo","SMetodo"); this.$.addHijos(new nodo("id",$$[$0-7],this._$.first_line,_$[$0-7].last_column),$$[$0-1]);
break;
case 116:
this.$= new nodo("SLlamada","SLlamada"); this.$.addHijos(new nodo("id",$$[$0-2],this._$.first_line,_$[$0-2].last_column));
break;
case 117:
this.$= new nodo("SLlamada","SLlamada"); this.$.addHijos(new nodo("id",$$[$0-3],this._$.first_line,_$[$0-3].last_column),$$[$0-1]);
break;
case 119:
this.$= new nodo("FParametrosLL","FParametrosLL");  this.$.addHijos($$[$0])
break;
case 120:
this.$= new nodo("FPrint","FPrint"); this.$.addHijos($$[$0-1])
break;
case 121:
this.$= new nodo("FPrintln","FPrintln"); this.$.addHijos($$[$0-1])
break;
case 122:
this.$= new nodo("FToLower","FToLower"); this.$.addHijos($$[$0-1])
break;
case 123:
this.$= new nodo("FToUpper","FToUpper"); this.$.addHijos($$[$0-1])
break;
case 124:
this.$= new nodo("FRound","FRound"); this.$.addHijos($$[$0-1])
break;
case 125:
this.$= new nodo("FLength","FLength"); this.$.addHijos($$[$0-1])
break;
case 126:
this.$= new nodo("FTypeOf","FTypeOf"); this.$.addHijos($$[$0-1])
break;
case 127:
this.$= new nodo("FToString","FToString"); this.$.addHijos($$[$0-1])
break;
case 128:
this.$= new nodo("FToCharArray","FToCharArray"); this.$.addHijos($$[$0-1])
break;
case 129:
this.$= new nodo("FRun","FRun"); this.$.addHijos($$[$0])
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{1:[3]},{5:[1,68],6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{1:[2,2]},o($Vy,[2,4]),o($Vy,[2,5]),{8:[1,70]},o($Vz,$VA,{8:[1,71]}),{8:[1,72]},{8:[1,73]},o($Vy,[2,10]),{8:[1,74]},o($Vy,[2,12]),o($Vy,[2,13]),o($Vy,[2,14]),{8:[1,75]},{8:[1,76]},{8:[1,77]},{8:[1,78]},o($Vy,[2,19]),o($Vy,[2,20]),o($Vz,$VB,{8:[1,79]}),{8:[1,80]},{8:[1,81]},{8:[1,82]},{55:[1,84],73:83,74:85},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},o($Vz,$VT,{40:[1,105],71:[1,103],75:$VU}),{40:[1,106]},{40:[1,107]},{40:[1,108]},{40:[1,109]},{82:[1,110]},{9:114,23:113,33:111,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{40:[1,115]},{40:[1,116]},{23:117,55:[1,118]},o($VW,[2,26]),o($VW,[2,27]),o($VW,[2,28]),o($VW,[2,29]),o($VW,[2,30]),{9:114,23:113,33:119,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,27:121,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:120,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:122,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($VX,[2,48]),o($VX,[2,49]),o($VX,[2,50]),o($VX,[2,51]),o($VX,[2,53]),o($VX,[2,54]),o($VX,[2,55]),o($VX,[2,56]),o($VX,[2,57]),o($VX,[2,58]),o($VX,[2,59]),o($VX,[2,60]),o($VX,[2,61]),o($VX,[2,62]),o($VX,[2,63]),o($VX,[2,66]),{40:[1,123]},{40:[1,124]},{40:[1,125]},{40:[1,126]},{40:[1,127]},{40:[1,128]},{40:[1,129]},{1:[2,1]},o($Vy,[2,3]),o($Vy,[2,6]),o($Vy,[2,7]),o($Vy,[2,8]),o($Vy,[2,9]),o($Vy,[2,11]),o($Vy,[2,15]),o($Vy,[2,16]),o($Vy,[2,17]),o($Vy,[2,18]),o($Vy,[2,21]),o($Vy,[2,22]),o($Vy,[2,23]),o($Vy,[2,24]),{8:[2,71],69:[1,130]},o($VY,$VZ,{71:[1,131],75:$V_}),o($VY,[2,73]),o($VX,[2,78]),o($VX,[2,79]),{9:114,23:113,33:133,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:134,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:135,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:136,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:137,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:138,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:139,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:140,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:141,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:142,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:143,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:144,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:145,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:146,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:147,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{51:[1,148]},{9:114,23:113,33:149,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,27:155,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:154,36:$V8,40:$V9,41:[1,151],42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,69:[2,110],95:150,96:153,98:152,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:156,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:157,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:158,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{7:159,13:160,27:161,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,55:[1,162]},{2:$V0,4:163,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:$V$,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{8:[2,105],34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},o($VX,$VT,{40:$V01,71:[1,164]}),o($VX,$VB),o($VX,$VA),{9:114,23:113,33:166,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:167,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{8:[2,129]},{40:$V01},o($V11,[2,37],{76:$VQ,77:$VR}),{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,168],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{41:[1,169]},o($V21,[2,39],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,76:$VQ,77:$VR}),{9:114,23:113,33:170,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:171,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:172,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:173,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:174,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:175,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:176,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{55:$V31,74:177},{72:[1,179]},{9:114,23:113,33:180,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($V41,[2,31],{76:$VQ,77:$VR}),o($V51,[2,32],{34:$VC,37:$VF,38:$VG,39:$VH,76:$VQ,77:$VR}),o($V51,[2,33],{34:$VC,37:$VF,38:$VG,39:$VH,76:$VQ,77:$VR}),o($V41,[2,34],{34:$VC,76:$VQ,77:$VR}),o($V41,[2,35],{34:$VC,76:$VQ,77:$VR}),o($V41,[2,36],{34:$VC,76:$VQ,77:$VR}),o($V61,[2,40],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,76:$VQ,77:$VR}),o($V61,[2,41],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,76:$VQ,77:$VR}),o($V61,[2,42],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,76:$VQ,77:$VR}),o($V61,[2,43],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,76:$VQ,77:$VR}),o($V61,[2,44],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,76:$VQ,77:$VR}),o($V61,[2,45],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,76:$VQ,77:$VR}),o([8,41,49,69,72,79,80],[2,46],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,50:$VP,76:$VQ,77:$VR}),o($V21,[2,47],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,76:$VQ,77:$VR}),{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS,80:[1,181]},{72:[1,182]},{8:[2,76],34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{41:[1,183],69:[1,184]},o([8,34,35,36,37,38,39,43,44,45,46,47,48,49,50,76,77,79],$V71,{80:[1,186],82:[1,185]}),{41:[1,187],69:[1,188]},o($V81,[2,109]),o($V81,[2,119],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS}),{55:[1,189]},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,190],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,191],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,192],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{8:[1,193]},{8:[1,194]},{55:$V31,73:83,74:85},{75:$VU},{6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:[1,195],85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{51:[1,196]},{9:114,23:113,33:154,36:$V8,40:$V9,41:[1,197],42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,98:152,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,198],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,199],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},o($VX,[2,38]),{9:114,23:113,33:200,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,201],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,202],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,203],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,204],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,205],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,206],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,207],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},o($VY,[2,72]),o($VY,$VZ,{75:$V_}),{71:[1,209],75:[1,208]},o($VY,[2,74],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS}),{9:114,23:113,33:210,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($Vz,$V91,{71:[1,212],75:[1,211]}),{80:[1,214],82:[1,213]},{27:155,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,96:215},{2:$V0,4:216,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:$V$,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{27:218,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,97:[1,217]},o($VX,[2,117]),{9:114,23:113,33:219,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($V81,[2,111]),{82:[1,220]},{82:[1,221]},{82:[1,222]},{9:114,23:113,33:223,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:224,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{91:[1,225]},{72:[1,226]},o($VX,$V71),{8:[2,120]},{8:[2,121]},o($V11,[2,77],{76:$VQ,77:$VR}),o($VX,[2,122]),o($VX,[2,123]),o($VX,[2,124]),o($VX,[2,125]),o($VX,[2,126]),o($VX,[2,127]),o($VX,[2,128]),{9:114,23:113,33:229,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,71:[1,228],78:[1,227],101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{72:[1,230]},o([8,41,69,72,79,80],[2,90],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR}),{9:114,23:113,33:231,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{51:[1,232]},{2:$V0,4:233,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:$V$,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{27:235,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,97:[1,234]},o($V81,[2,108]),{6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:[1,236],85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{82:[1,237]},{82:[1,238]},o($V81,[2,118],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS}),{2:$V0,4:239,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:$V$,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{86:240,87:241,88:242,89:$Va1,90:$Vb1},{2:$V0,4:245,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:$V$,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{8:[1,246],34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{8:[1,247],34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{40:[1,248]},o($VX,$V91,{71:[1,249]}),{27:250,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{9:114,23:113,33:252,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,68:251,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{8:[2,84],34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{75:[1,253]},{8:[2,88],34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{72:[1,254]},{6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:[1,255],85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{82:[1,256]},{82:[1,257]},o($Vy,[2,114]),{2:$V0,4:258,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:$V$,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{2:$V0,4:259,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:$V$,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:[1,260],85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{83:[1,262],87:261,88:263,89:$Va1,90:$Vb1},{83:[1,264]},o($Vc1,[2,98]),{80:[1,265]},{9:114,23:113,33:266,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:[1,267],85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{9:268,23:113,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:269,23:113,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:270,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{51:[1,271]},{71:[1,272]},{69:$Vd1,72:[1,273]},o($Ve1,[2,68],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS}),{71:[1,276],78:[1,275]},o($Vz,$Vf1,{75:[1,277]}),o($Vy,[2,112]),{2:$V0,4:278,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:$V$,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{2:$V0,4:279,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:$V$,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:[1,280],85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:[1,281],85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},o($Vy,[2,91],{84:[1,282]}),{83:[1,283]},o($Vy,[2,95]),o($Vc1,[2,97]),o($Vy,[2,96]),{2:$V0,4:284,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:$V$,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS,80:[1,285]},o($Vy,[2,101]),o($Vz,$VA,{41:[1,286]}),o($Vz,$VA,{41:[1,287]}),{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,41:[1,288],43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},{72:[1,289]},{9:114,23:113,33:290,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{8:[2,82]},{9:114,23:113,33:291,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{27:292,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{9:114,23:113,33:252,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,68:294,70:293,71:[1,295],101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{9:114,23:113,33:296,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:[1,297],85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:[1,298],85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},o($Vy,[2,115]),o($Vy,[2,107]),{12:300,81:$Vi,82:[1,299]},o($Vy,[2,94]),{6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:[2,100],85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},o($Vc1,$V$,{6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,21:19,22:20,23:21,24:22,25:23,26:24,27:25,33:26,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,4:301,2:$V0,19:$V1,20:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,81:$Vi,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx}),{82:[1,302]},{82:[1,303]},{8:[2,104]},o($VX,$Vf1),{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,72:[1,304],76:$VQ,77:$VR,79:$VS},o($Ve1,[2,67],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS}),{71:[1,305]},{69:[1,307],72:[1,306]},{69:$Vd1,72:[1,308]},{9:114,23:113,33:252,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,68:309,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{8:[2,89],34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,76:$VQ,77:$VR,79:$VS},o($Vy,[2,113]),o($Vy,[2,106]),{2:$V0,4:310,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:$V$,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},o($Vy,[2,93]),o($Vc1,[2,99],{7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,21:19,22:20,23:21,24:22,25:23,26:24,27:25,33:26,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,6:69,19:$V1,20:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,81:$Vi,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx}),{2:$V0,4:311,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:$V$,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{2:$V0,4:312,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:$V$,85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{8:[2,80]},{9:114,23:113,33:313,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},{8:[2,83]},{71:[1,314]},{8:[2,85]},{69:$Vd1,72:[1,315]},{6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:[1,316],85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:[1,317],85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{6:69,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,81:$Vi,83:[1,318],85:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,72:[1,319],76:$VQ,77:$VR,79:$VS},{9:114,23:113,33:252,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,68:320,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($Ve1,[2,70]),o($Vy,[2,92]),o($Vy,[2,102]),o($Vy,[2,103]),{71:[1,321]},{69:$Vd1,72:[1,322]},{9:114,23:113,33:323,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$VV,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:60,101:$Vq,102:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw},o($Ve1,[2,69]),{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,72:[1,324],76:$VQ,77:$VR,79:$VS},{8:[2,81]}],
defaultActions: {3:[2,2],68:[2,1],117:[2,129],198:[2,120],199:[2,121],273:[2,82],288:[2,104],304:[2,80],306:[2,83],308:[2,85],324:[2,81]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    function nodo(etiqueta, valor, fila, columna){
        this.etiqueta=etiqueta;
        this.valor=valor;
        this.fila=fila;
        this.columna=columna;
        this.hijos=[];
        this.addHijos=addHijos;
        this.getHijos=getHijos;

        function addHijos(){
            for(var i=0; i<arguments.length;i++){
                this.hijos.push(arguments[i]);
                if(arguments[i]!=null){
                    arguments[i].padre=this;
                }
            }
        }
        function getHijos(pos){
            if (pos >(this.hijos.length-1)) return null;
            return this.hijos[pos]
        }
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple l√≠nea
break;
case 2:// comentario multiple l√≠neas
break;
case 3:return 28
break;
case 4:return 29
break;
case 5:return 30
break;
case 6:return 31
break;
case 7:return 32
break;
case 8:return 53
break;
case 9:return 54
break;
case 10:return 78
break;
case 11:return 81
break;
case 12:return 84
break;
case 13:return 85
break;
case 14:return 89
break;
case 15:return 90
break;
case 16:return 91
break;
case 17:return 92
break;
case 18:return 93
break;
case 19:return 19
break;
case 20:return 20
break;
case 21:return 94
break;
case 22:return 97
break;
case 23:return 99;
break;
case 24:return 100;
break;
case 25:return 101;
break;
case 26:return 102;
break;
case 27:return 103;
break;
case 28:return 104;
break;
case 29:return 105;
break;
case 30:return 106;
break;
case 31:return 107;
break;
case 32:return 108;
break;
case 33:return 80;
break;
case 34:return 8;
break;
case 35:return 82;
break;
case 36:return 83;
break;
case 37:return 40;
break;
case 38:return 41;
break;
case 39:return 71;
break;
case 40:return 72;
break;
case 41:return 69;
break;
case 42:return 43;
break;
case 43:return 44;
break;
case 44:return 45;
break;
case 45:return 46;
break;
case 46:return 47;
break;
case 47:return 48;
break;
case 48:return 42;
break;
case 49:return 49;
break;
case 50:return 50;
break;
case 51:return 79;
break;
case 52:return 76;
break;
case 53:return 77;
break;
case 54:return 35;
break;
case 55:return 36;
break;
case 56:return 37;
break;
case 57:return 38;
break;
case 58:return 34;
break;
case 59:return 39;
break;
case 60:return 75;
break;
case 61:return 52;
break;
case 62:return 51;
break;
case 63:return 55;
break;
case 64:return 56;
break;
case 65:return 57;
break;
case 66:return 5;
break;
case 67: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ \r\t\n\s]+)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}