/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,17],$V2=[1,18],$V3=[1,37],$V4=[1,38],$V5=[1,39],$V6=[1,40],$V7=[1,41],$V8=[1,42],$V9=[1,43],$Va=[1,44],$Vb=[1,45],$Vc=[1,46],$Vd=[1,47],$Ve=[1,48],$Vf=[1,49],$Vg=[1,50],$Vh=[1,27],$Vi=[1,28],$Vj=[1,29],$Vk=[1,30],$Vl=[1,31],$Vm=[1,32],$Vn=[1,33],$Vo=[1,34],$Vp=[1,35],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,36],$Vy=[5,19,20,28,29,30,31,32,36,40,42,51,52,53,54,55,56,57,76,78,80,84,86,87,88,89,90,94,95,96,97,98,99,100,101,102,103],$Vz=[34,35,36,37,38,39,43,44,45,46,47,48,49,50],$VA=[2,64],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[2,54],$VO=[1,100],$VP=[1,108],$VQ=[41,57,70,77],$VR=[8,34,35,36,37,38,39,41,43,44,45,46,47,48,49,50,68,71,85],$VS=[8,68],$VT=[2,73],$VU=[1,126],$VV=[2,25],$VW=[1,158],$VX=[1,159],$VY=[8,34,35,37,38,39,41,43,44,45,46,47,48,49,50,68,71,85],$VZ=[8,41,49,50,68,71,85],$V_=[1,175],$V$=[8,35,37,38,39,41,43,44,45,46,47,48,49,50,68,71,85],$V01=[8,41,43,44,45,46,47,48,49,50,68,71,85],$V11=[2,115],$V21=[1,184],$V31=[41,68],$V41=[2,86],$V51=[1,243],$V61=[1,242],$V71=[78,84,86],$V81=[1,274],$V91=[68,71],$Va1=[2,87];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"PTCOMA":8,"inc_dec":9,"dec_vectores":10,"mod_vectores":11,"sen_if":12,"asig_solo":13,"sen_switch":14,"sen_while":15,"sen_for":16,"sen_dowhile":17,"sen_return":18,"R_BREAK":19,"R_CONTINUE":20,"metodos":21,"funcion":22,"llamada":23,"fprint":24,"fprintln":25,"frun":26,"tipo":27,"R_INT":28,"R_DOUBLE":29,"R_BOOLEAN":30,"R_CHAR":31,"R_STRING":32,"expresion":33,"POTENCIA":34,"MAS":35,"MENOS":36,"POR":37,"DIV":38,"MODULO":39,"PARIZQ":40,"PARDER":41,"DIF":42,"IGUALACION":43,"DIFERENCIACION":44,"MENIGUALQ":45,"MAYIGUALQ":46,"MENORQ":47,"MAYORQ":48,"OR":49,"AND":50,"ENTERO":51,"DECIMAL":52,"R_TRUE":53,"R_FALSE":54,"CADENA":55,"CARACTER":56,"IDENTIFICADOR":57,"acs_vectores":58,"casteo":59,"ftolower":60,"ftoupper":61,"fround":62,"flength":63,"ftypeof":64,"ftostring":65,"ftochararray":66,"lista":67,"COMA":68,"listavec":69,"CORIZQ":70,"CORDER":71,"dec":72,"asig":73,"IGUAL":74,"inc_decf":75,"R_IF":76,"LLAVIZQ":77,"LLAVDER":78,"R_ELSE":79,"R_SWITCH":80,"list_case":81,"s_default":82,"s_case":83,"R_CASE":84,"DOSPTS":85,"R_DEFAULT":86,"R_WHILE":87,"R_FOR":88,"R_DO":89,"R_RETURN":90,"parametros":91,"R_VOID":92,"parametros_llamada":93,"R_PRINT":94,"R_PRINTLN":95,"R_TOLOWER":96,"R_TOUPPER":97,"R_ROUND":98,"R_LENGTH":99,"R_TYPEOF":100,"R_TOSTRING":101,"R_TOCHARARRAY":102,"R_RUN":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PTCOMA",19:"R_BREAK",20:"R_CONTINUE",28:"R_INT",29:"R_DOUBLE",30:"R_BOOLEAN",31:"R_CHAR",32:"R_STRING",34:"POTENCIA",35:"MAS",36:"MENOS",37:"POR",38:"DIV",39:"MODULO",40:"PARIZQ",41:"PARDER",42:"DIF",43:"IGUALACION",44:"DIFERENCIACION",45:"MENIGUALQ",46:"MAYIGUALQ",47:"MENORQ",48:"MAYORQ",49:"OR",50:"AND",51:"ENTERO",52:"DECIMAL",53:"R_TRUE",54:"R_FALSE",55:"CADENA",56:"CARACTER",57:"IDENTIFICADOR",68:"COMA",70:"CORIZQ",71:"CORDER",74:"IGUAL",76:"R_IF",77:"LLAVIZQ",78:"LLAVDER",79:"R_ELSE",80:"R_SWITCH",84:"R_CASE",85:"DOSPTS",86:"R_DEFAULT",87:"R_WHILE",88:"R_FOR",89:"R_DO",90:"R_RETURN",92:"R_VOID",94:"R_PRINT",95:"R_PRINTLN",96:"R_TOLOWER",97:"R_TOUPPER",98:"R_ROUND",99:"R_LENGTH",100:"R_TYPEOF",101:"R_TOSTRING",102:"R_TOCHARARRAY",103:"R_RUN"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,0],[27,1],[27,1],[27,1],[27,1],[27,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,3],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[67,3],[67,1],[69,5],[69,4],[7,2],[72,3],[72,1],[73,3],[73,1],[13,3],[59,4],[9,3],[9,3],[75,3],[75,3],[10,9],[10,14],[10,8],[10,10],[10,6],[10,10],[58,4],[58,7],[11,6],[11,9],[12,7],[12,11],[12,9],[14,8],[14,7],[14,7],[81,2],[81,1],[83,4],[82,3],[15,7],[16,11],[16,11],[17,8],[18,2],[22,9],[22,8],[91,4],[91,2],[91,0],[21,7],[21,9],[21,6],[21,8],[23,4],[23,3],[93,3],[93,1],[24,4],[25,4],[60,4],[61,4],[62,4],[63,4],[64,4],[65,4],[66,4],[26,5],[26,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=new nodo("Raiz","Raiz",this.$first_line,_$[$0-1].last_column); this.$.addHijos($$[$0-1]); return this.$;
break;
case 3:
$$[$0-1].addHijos($$[$0]); this.$=$$[$0-1];
break;
case 4:
this.$= new nodo("Instrucciones","Instrucciones",this._$.first_line,_$[$0].last_column); this.$.addHijos($$[$0]);
break;
case 5:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 6: case 7: case 8: case 9: case 11: case 15: case 16: case 17: case 18: case 21: case 22: case 23: case 24: case 38:
this.$=$$[$0-1]
break;
case 10: case 12: case 13: case 14: case 19: case 20: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64:
this.$=$$[$0]
break;
case 26:
this.$= new nodo("Int","Int",this._$.first_line,_$[$0].last_column);
break;
case 27:
this.$= new nodo("Double","Double",this._$.first_line,_$[$0].last_column);
break;
case 28:
this.$= new nodo("Boolean","Boolean",this._$.first_line,_$[$0].last_column);
break;
case 29:
this.$= new nodo("Char","Char",this._$.first_line,_$[$0].last_column);
break;
case 30:
this.$= new nodo("String","String",this._$.first_line,_$[$0].last_column);
break;
case 31: case 32: case 33: case 34: case 35: case 36:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0-1].last_column);this.$.addHijos($$[$0-2],new nodo("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 37:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("op",$$[$0-1],this._$.first_line,_$[$0].last_column),$$[$0]);
break;
case 39:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("op_log",$$[$0-1],this._$.first_line,_$[$0].last_column),$$[$0]);
break;
case 40: case 41: case 42: case 43: case 44: case 45:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0-1].last_column);this.$.addHijos($$[$0-2],new nodo("op_rel",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 46: case 47:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0-1].last_column);this.$.addHijos($$[$0-2],new nodo("op_log",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 48:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("entero",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 49:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("decimal",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 50:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("true",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 51:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("false",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 52:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);
    var cad= $$[$0].substr(0,$$[$0].length);
    cad=cad.replace(/\\n/g,"\n");
    cad=cad.replace(/\\t/g,"\t");
    cad=cad.replace(/\\r/g,"\r");
    cad=cad.replace(/\\\\/g,"\\");
    cad=cad.replace(/\\\"/g,"\"");
    cad=cad.replace(/\\\'/g,"\'");
    this.$.addHijos(new nodo("cadena",cad,this._$.first_line,_$[$0].last_column));
break;
case 53:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("caracter",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 54:
this.$= new nodo("Expresion","Expresion",this._$.first_line,_$[$0].last_column);this.$.addHijos(new nodo("id",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 69:
this.$= new nodo("Var","Var",this._$.first_line,_$[$0-1].last_column); this.$.addHijos($$[$0-1],$$[$0]);
break;
case 70:
$$[$0-2].addHijos($$[$0]); this.$=$$[$0-2];
break;
case 71:
this.$= new nodo("Dec","Dec"); this.$.addHijos($$[$0])
break;
case 72:
this.$= new nodo("Asig","Asig"); this.$.addHijos(new nodo("id",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0])
break;
case 73:
this.$=new nodo("id",$$[$0],this._$.first_line,_$[$0].last_column)
break;
case 74:
console.log($$[$0-2]+' = '+$$[$0])
break;
case 75:
this.$=$$[$0-3]+""+$$[$0-2]+""+$$[$0-1]+""+$$[$0]
break;
case 76: case 77: case 78: case 79:
console.log($$[$0-2]+""+$$[$0-1]+""+$$[$0])
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{1:[3]},{5:[1,67],6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{1:[2,2]},o($Vy,[2,4]),o($Vy,[2,5]),{8:[1,69]},{8:[1,70]},{8:[1,71]},{8:[1,72]},o($Vy,[2,10]),{8:[1,73]},o($Vy,[2,12]),o($Vy,[2,13]),o($Vy,[2,14]),{8:[1,74]},{8:[1,75]},{8:[1,76]},{8:[1,77]},o($Vy,[2,19]),o($Vy,[2,20]),o($Vz,$VA,{8:[1,78]}),{8:[1,79]},{8:[1,80]},{8:[1,81]},{57:[1,83],72:82,73:84},{34:$VB,35:[1,85],36:[1,86],37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},o($Vz,$VN,{40:[1,101],70:[1,99],74:$VO}),{40:[1,102]},{40:[1,103]},{40:[1,104]},{40:[1,105]},{77:[1,106]},{23:109,33:107,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{40:[1,110]},{40:[1,111]},{57:[1,112]},o($VQ,[2,26]),o($VQ,[2,27]),o($VQ,[2,28]),o($VQ,[2,29]),o($VQ,[2,30]),{23:109,33:113,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,27:115,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:114,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:116,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},o($VR,[2,48]),o($VR,[2,49]),o($VR,[2,50]),o($VR,[2,51]),o($VR,[2,52]),o($VR,[2,53]),o($VR,[2,55]),o($VR,[2,56]),o($VR,[2,57]),o($VR,[2,58]),o($VR,[2,59]),o($VR,[2,60]),o($VR,[2,61]),o($VR,[2,62]),o($VR,[2,63]),{40:[1,117]},{40:[1,118]},{40:[1,119]},{40:[1,120]},{40:[1,121]},{40:[1,122]},{40:[1,123]},{1:[2,1]},o($Vy,[2,3]),o($Vy,[2,6]),o($Vy,[2,7]),o($Vy,[2,8]),o($Vy,[2,9]),o($Vy,[2,11]),o($Vy,[2,15]),o($Vy,[2,16]),o($Vy,[2,17]),o($Vy,[2,18]),o($Vy,[2,21]),o($Vy,[2,22]),o($Vy,[2,23]),o($Vy,[2,24]),{8:[2,69],68:[1,124]},o($VS,$VT,{70:[1,125],74:$VU}),o($VS,[2,71]),{23:109,33:128,35:[1,127],36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:130,36:[1,129],40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:131,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:132,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:133,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:134,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:135,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:136,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:137,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:138,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:139,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:140,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:141,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:142,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{51:[1,143]},{23:109,33:144,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,27:148,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:149,36:$V8,40:$V9,41:[1,146],42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,68:[2,109],91:145,93:147,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:150,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:151,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:152,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{7:153,13:154,27:155,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,57:[1,156]},{2:$V0,4:157,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:$VV,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{8:[2,104],34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},o($VR,$VN,{40:[1,161],70:[1,160]}),o($VR,$VA),{23:109,33:162,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:163,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{40:[1,164]},o($VY,[2,37],{36:$VX}),{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,41:[1,165],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{41:[1,166]},o($VZ,[2,39],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK}),{23:109,33:167,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:168,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{52:[1,169]},{23:109,33:170,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:171,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:172,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:173,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{57:$V_,73:174},{71:[1,176]},{23:109,33:177,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{8:[2,76]},o([8,35,41,43,44,45,46,47,48,49,50,68,71,85],[2,32],{34:$VB,36:$VX,37:$VC,38:$VD,39:$VE}),{8:[2,77],23:109,33:113,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},o($VY,[2,33],{36:$VX}),o($V$,[2,31],{36:$VX}),o($V$,[2,34],{34:$VB,36:$VX}),o($V$,[2,35],{34:$VB,36:$VX}),o($V$,[2,36],{34:$VB,36:$VX}),o($V01,[2,40],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE}),o($V01,[2,41],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE}),o($V01,[2,42],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE}),o($V01,[2,43],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE}),o($V01,[2,44],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE}),o($V01,[2,45],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE}),o([8,41,49,68,71,85],[2,46],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,50:$VM}),o($VZ,[2,47],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK}),{71:[1,178]},{8:[2,74],34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{41:[1,179],68:[1,180]},o([8,34,35,36,37,38,39,43,44,45,46,47,48,49,50],$V11,{77:[1,181],85:[1,182]}),{41:[1,183],68:$V21},{57:[1,185]},o($V31,[2,117],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM}),{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,41:[1,186],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,41:[1,187],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,41:[1,188],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{8:[1,189]},{8:[1,190]},{57:$V_,72:82,73:84},{74:$VO},{6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:[1,191],80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{23:109,33:128,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:130,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{51:[1,192]},{23:109,33:149,36:$V8,40:$V9,41:[1,193],42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,93:147,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,41:[1,194],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,41:[1,195],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{23:109,33:149,36:$V8,40:$V9,41:[1,197],42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,93:196,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},o($VR,[2,38]),{23:109,33:198,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,41:[1,199],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,41:[1,200],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{41:[1,201]},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,41:[1,202],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,41:[1,203],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,41:[1,204],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,41:[1,205],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},o($VS,[2,70]),o($VS,$VT,{74:$VU}),{70:[1,207],74:[1,206]},o($VS,[2,72],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM}),o($Vz,$V41,{70:[1,209],74:[1,208]}),{77:[1,210],85:[1,211]},{27:212,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{2:$V0,4:213,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:$VV,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{27:215,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,92:[1,214]},o($VR,[2,114]),{23:109,33:216,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},o($V31,[2,108]),{77:[1,217]},{77:[1,218]},{77:[1,219]},{23:109,33:220,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:221,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{87:[1,222]},{71:[1,223]},o($VR,$V11),{8:[2,118]},{8:[2,119]},{41:[1,224],68:$V21},{8:[2,128]},o($VR,[2,75]),o($VR,[2,120]),o($VR,[2,121]),o($VR,[2,122]),o($VR,[2,123]),o($VR,[2,124]),o($VR,[2,125]),o($VR,[2,126]),{23:109,27:225,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:227,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,70:[1,226],96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{71:[1,228]},{23:109,33:229,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{51:[1,230]},{2:$V0,4:231,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:$VV,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{27:233,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,92:[1,232]},{57:[1,234]},{6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:[1,235],80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{77:[1,236]},{77:[1,237]},o($V31,[2,116],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM}),{2:$V0,4:238,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:$VV,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{81:239,82:240,83:241,84:$V51,86:$V61},{2:$V0,4:244,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:$VV,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{8:[1,245],34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{8:[1,246],34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{40:[1,247]},o($VR,$V41,{70:[1,248]}),{8:[2,127]},{70:[1,249]},{23:109,33:251,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:250,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{8:[2,84],34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{74:[1,252]},{8:[2,88],34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{71:[1,253]},{6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:[1,254],80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{77:[1,255]},{77:[1,256]},o($V31,[2,107]),o($Vy,[2,112]),{2:$V0,4:257,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:$VV,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{2:$V0,4:258,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:$VV,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:[1,259],80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{78:[1,261],82:260,83:262,84:$V51,86:$V61},{78:[1,263]},o($V71,[2,97]),{85:[1,264]},{23:109,33:265,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:[1,266],80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{23:109,33:268,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,75:267,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:268,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,75:269,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:270,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{51:[1,271]},{23:109,33:272,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{68:$V81,71:[1,273]},o($V91,[2,66],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM}),{27:275,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,70:[1,276]},o($Vz,$Va1,{74:[1,277]}),o($Vy,[2,110]),{2:$V0,4:278,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:$VV,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{2:$V0,4:279,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:$VV,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:[1,280],80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:[1,281],80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},o($Vy,[2,90],{79:[1,282]}),{78:[1,283]},o($Vy,[2,94]),o($V71,[2,96]),o($Vy,[2,95]),{2:$V0,4:284,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:$VV,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,85:[1,285]},o($Vy,[2,100]),{41:[1,286]},{34:$VB,35:[1,287],36:[1,288],37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{41:[1,289]},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,41:[1,290],43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},{71:[1,291]},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,71:[1,292]},{8:[2,82]},{23:109,33:293,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{70:[1,294]},{23:109,33:251,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:296,68:[1,297],69:295,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:298,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:[1,299],80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:[1,300],80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},o($Vy,[2,113]),o($Vy,[2,106]),{12:302,76:$Vi,77:[1,301]},o($Vy,[2,93]),{6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:[2,99],80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},o($V71,$VV,{6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,21:19,22:20,23:21,24:22,25:23,26:24,27:25,33:26,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,4:303,2:$V0,19:$V1,20:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,76:$Vi,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx}),{77:[1,304]},{23:109,33:128,35:[1,305],36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{23:109,33:130,36:[1,306],40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{77:[1,307]},{8:[2,103]},o($VR,$Va1),{8:[2,80]},o($V91,[2,65],{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM}),{23:109,33:308,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{68:[1,310],71:[1,309]},{68:$V81,71:[1,311]},{70:[1,312]},{8:[2,89],34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM},o($Vy,[2,111]),o($Vy,[2,105]),{2:$V0,4:313,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:$VV,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},o($Vy,[2,92]),o($V71,[2,98],{7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,21:19,22:20,23:21,24:22,25:23,26:24,27:25,33:26,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,6:68,19:$V1,20:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,76:$Vi,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx}),{2:$V0,4:314,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:$VV,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{41:[2,78]},{23:109,33:113,36:$V8,40:$V9,41:[2,79],42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{2:$V0,4:315,6:4,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:$VV,80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,71:[1,316]},{8:[2,83]},{70:[1,317]},{8:[2,85]},{23:109,33:251,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:318,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:[1,319],80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:[1,320],80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{6:68,7:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,76:$Vi,78:[1,321],80:$Vj,87:$Vk,88:$Vl,89:$Vm,90:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx},{70:[1,322]},{23:109,33:251,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,67:323,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{68:$V81,71:[1,324]},o($Vy,[2,91]),o($Vy,[2,101]),o($Vy,[2,102]),{23:109,33:325,36:$V8,40:$V9,42:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$VP,58:51,59:52,60:53,61:54,62:55,63:56,64:57,65:58,66:59,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw},{68:$V81,71:[1,326]},o($V91,[2,68]),{34:$VB,35:$VW,36:$VX,37:$VC,38:$VD,39:$VE,43:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,71:[1,327]},o($V91,[2,67]),{8:[2,81]}],
defaultActions: {3:[2,2],67:[2,1],127:[2,76],194:[2,118],195:[2,119],197:[2,128],224:[2,127],273:[2,82],290:[2,103],292:[2,80],305:[2,78],309:[2,83],311:[2,85],327:[2,81]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    function nodo(etiqueta, valor, fila, columna){
        this.etiqueta=etiqueta;
        this.valor=valor;
        this.fila=fila;
        this.columna=columna;
        this.hijos=[];
        this.addHijos=addHijos;
        this.getHijos=getHijos;

        function addHijos(){
            for(var i=0; i<arguments.length;i++){
                this.hijos.push(arguments[i]);
                if(arguments[i]!=null){
                    arguments[i].padre=this;
                }
            }
        }
        function getHijos(pos){
            if (pos >(this.hijos.length-1)) return null;
            return this.hijos[pos]
        }
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple l√≠nea
break;
case 2:// comentario multiple l√≠neas
break;
case 3:return 28
break;
case 4:return 29
break;
case 5:return 30
break;
case 6:return 31
break;
case 7:return 32
break;
case 8:return 53
break;
case 9:return 54
break;
case 10:return 'R_NEW'
break;
case 11:return 76
break;
case 12:return 79
break;
case 13:return 80
break;
case 14:return 84
break;
case 15:return 86
break;
case 16:return 87
break;
case 17:return 88
break;
case 18:return 89
break;
case 19:return 19
break;
case 20:return 20
break;
case 21:return 90
break;
case 22:return 92
break;
case 23:return 94;
break;
case 24:return 95;
break;
case 25:return 96;
break;
case 26:return 97;
break;
case 27:return 98;
break;
case 28:return 99;
break;
case 29:return 100;
break;
case 30:return 101;
break;
case 31:return 102;
break;
case 32:return 103;
break;
case 33:return 85;
break;
case 34:return 8;
break;
case 35:return 77;
break;
case 36:return 78;
break;
case 37:return 40;
break;
case 38:return 41;
break;
case 39:return 70;
break;
case 40:return 71;
break;
case 41:return 68;
break;
case 42:return 35;
break;
case 43:return 36;
break;
case 44:return 37;
break;
case 45:return 38;
break;
case 46:return 34;
break;
case 47:return 39;
break;
case 48:return 74;
break;
case 49:return 43;
break;
case 50:return 44;
break;
case 51:return 47;
break;
case 52:return 45;
break;
case 53:return 48;
break;
case 54:return 46;
break;
case 55:return 42;
break;
case 56:return 49;
break;
case 57:return 50;
break;
case 58:return 52;
break;
case 59:return 51;
break;
case 60:return 57;
break;
case 61:return 56;
break;
case 62:return 55;
break;
case 63:return 5;
break;
case 64: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ \r\t\n\s]+)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}