/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,17],$V2=[1,18],$V3=[1,37],$V4=[1,38],$V5=[1,39],$V6=[1,40],$V7=[1,41],$V8=[1,42],$V9=[1,43],$Va=[1,44],$Vb=[1,45],$Vc=[1,46],$Vd=[1,47],$Ve=[1,27],$Vf=[1,58],$Vg=[1,28],$Vh=[1,29],$Vi=[1,30],$Vj=[1,31],$Vk=[1,32],$Vl=[1,33],$Vm=[1,34],$Vn=[1,35],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,36],$Vw=[5,18,20,28,29,30,31,32,34,35,36,37,38,39,40,59,64,66,68,72,74,75,76,77,78,82,83,84,85,86,87,88,89,90,91],$Vx=[61,62],$Vy=[2,37],$Vz=[1,76],$VA=[1,84],$VB=[40,54,60,65],$VC=[19,52,55,60,61,62,73],$VD=[19,52],$VE=[2,56],$VF=[1,99],$VG=[2,25],$VH=[1,132],$VI=[2,100],$VJ=[1,145],$VK=[52,60],$VL=[2,69],$VM=[2,99],$VN=[1,210],$VO=[1,209],$VP=[66,72,74],$VQ=[1,246],$VR=[52,55],$VS=[2,70];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"inc_dec":8,"dec_vectores":9,"mod_vectores":10,"sen_if":11,"asig_solo":12,"sen_switch":13,"sen_while":14,"sen_for":15,"sen_dowhile":16,"sen_return":17,"R_BREAK":18,"PTCOMA":19,"R_CONTINUE":20,"metodos":21,"funcion":22,"llamada":23,"fprint":24,"fprintln":25,"frun":26,"tipo":27,"R_INT":28,"R_DOUBLE":29,"R_BOOLEAN":30,"R_CHAR":31,"R_STRING":32,"expresion":33,"ENTERO":34,"DECIMAL":35,"R_TRUE":36,"R_FALSE":37,"CADENA":38,"CARACTER":39,"IDENTIFICADOR":40,"acs_vectores":41,"casteo":42,"ftolower":43,"ftoupper":44,"fround":45,"flength":46,"ftypeof":47,"ftostring":48,"ftochararray":49,"llamada_sin":50,"lista":51,"COMA":52,"listavec":53,"CORIZQ":54,"CORDER":55,"dec":56,"asig":57,"IGUAL":58,"PARIZQ":59,"PARDER":60,"MAS":61,"MENOS":62,"inc_decf":63,"R_IF":64,"LLAVIZQ":65,"LLAVDER":66,"R_ELSE":67,"R_SWITCH":68,"list_case":69,"s_default":70,"s_case":71,"R_CASE":72,"DOSPTS":73,"R_DEFAULT":74,"R_WHILE":75,"R_FOR":76,"R_DO":77,"R_RETURN":78,"parametros":79,"R_VOID":80,"parametros_llamada":81,"R_PRINT":82,"R_PRINTLN":83,"R_TOLOWER":84,"R_TOUPPER":85,"R_ROUND":86,"R_LENGTH":87,"R_TYPEOF":88,"R_TOSTRING":89,"R_TOCHARARRAY":90,"R_RUN":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"R_BREAK",19:"PTCOMA",20:"R_CONTINUE",28:"R_INT",29:"R_DOUBLE",30:"R_BOOLEAN",31:"R_CHAR",32:"R_STRING",34:"ENTERO",35:"DECIMAL",36:"R_TRUE",37:"R_FALSE",38:"CADENA",39:"CARACTER",40:"IDENTIFICADOR",52:"COMA",54:"CORIZQ",55:"CORDER",58:"IGUAL",59:"PARIZQ",60:"PARDER",61:"MAS",62:"MENOS",64:"R_IF",65:"LLAVIZQ",66:"LLAVDER",67:"R_ELSE",68:"R_SWITCH",72:"R_CASE",73:"DOSPTS",74:"R_DEFAULT",75:"R_WHILE",76:"R_FOR",77:"R_DO",78:"R_RETURN",80:"R_VOID",82:"R_PRINT",83:"R_PRINTLN",84:"R_TOLOWER",85:"R_TOUPPER",86:"R_ROUND",87:"R_LENGTH",88:"R_TYPEOF",89:"R_TOSTRING",90:"R_TOCHARARRAY",91:"R_RUN"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,0],[27,1],[27,1],[27,1],[27,1],[27,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[51,3],[51,1],[53,5],[53,4],[7,3],[56,3],[56,1],[57,3],[57,1],[12,4],[42,4],[8,4],[8,4],[63,3],[63,3],[9,10],[9,15],[9,9],[9,11],[9,7],[9,11],[41,4],[41,7],[10,7],[10,10],[11,7],[11,11],[11,9],[13,8],[13,7],[13,7],[69,2],[69,1],[71,4],[70,3],[14,7],[15,10],[15,10],[16,9],[17,3],[22,9],[22,8],[79,4],[79,2],[79,0],[21,7],[21,9],[21,6],[21,8],[23,5],[23,4],[50,4],[50,3],[81,3],[81,1],[24,5],[25,5],[43,4],[44,4],[45,4],[46,4],[47,4],[48,4],[49,4],[26,6],[26,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 55:
console.log($$[$0-2]+' = '+$$[$0])
break;
case 56:
console.log($$[$0]+' = 0')
break;
case 57:
console.log($$[$0-3]+' = '+$$[$0-1])
break;
case 58:
this.$=$$[$0-3]+""+$$[$0-2]+""+$$[$0-1]+""+$$[$0]
break;
case 59: case 60:
console.log($$[$0-3]+""+$$[$0-2]+""+$$[$0-1])
break;
case 61: case 62:
console.log($$[$0-2]+""+$$[$0-1]+""+$$[$0])
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{1:[3]},{5:[1,66],6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{1:[2,2]},o($Vw,[2,4]),o($Vw,[2,5]),o($Vw,[2,6]),o($Vw,[2,7]),o($Vw,[2,8]),o($Vw,[2,9]),o($Vw,[2,10]),o($Vw,[2,11]),o($Vw,[2,12]),o($Vw,[2,13]),o($Vw,[2,14]),o($Vw,[2,15]),o($Vw,[2,16]),{19:[1,68]},{19:[1,69]},o($Vw,[2,19]),o($Vw,[2,20]),o($Vw,[2,21]),o($Vw,[2,22]),o($Vw,[2,23]),o($Vw,[2,24]),{40:[1,71],56:70,57:72},{61:[1,73],62:[1,74]},o($Vx,$Vy,{54:[1,75],58:$Vz,59:[1,77]}),{59:[1,78]},{59:[1,79]},{59:[1,80]},{59:[1,81]},{65:[1,82]},{33:83,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{59:[1,85]},{59:[1,86]},{40:[1,87]},o($VB,[2,26]),o($VB,[2,27]),o($VB,[2,28]),o($VB,[2,29]),o($VB,[2,30]),o($VC,[2,31]),o($VC,[2,32]),o($VC,[2,33]),o($VC,[2,34]),o($VC,[2,35]),o($VC,[2,36]),o($VC,[2,38]),o($VC,[2,39]),o($VC,[2,40]),o($VC,[2,41]),o($VC,[2,42]),o($VC,[2,43]),o($VC,[2,44]),o($VC,[2,45]),o($VC,[2,46]),o($VC,[2,47]),{27:88,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{59:[1,89]},{59:[1,90]},{59:[1,91]},{59:[1,92]},{59:[1,93]},{59:[1,94]},{59:[1,95]},{1:[2,1]},o($Vw,[2,3]),o($Vw,[2,17]),o($Vw,[2,18]),{19:[1,96],52:[1,97]},o($VD,$VE,{54:[1,98],58:$VF}),o($VD,[2,54]),{61:[1,100]},{62:[1,101]},{34:[1,102]},{33:103,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{27:107,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:108,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,52:[2,92],59:$Vf,60:[1,105],79:104,81:106,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{33:109,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{33:110,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{33:111,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{7:112,12:113,27:114,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:[1,115]},{2:$V0,4:116,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:$VG,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{19:[1,117]},o($VC,$Vy,{54:[1,118],59:[1,119]}),{33:120,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{33:121,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{59:[1,122]},{60:[1,123]},{33:124,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{33:125,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{35:[1,126]},{33:127,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{33:128,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{33:129,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{33:130,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},o($Vw,[2,52]),{40:$VH,57:131},{55:[1,133]},{33:134,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{19:[1,135]},{19:[1,136]},{55:[1,137]},{19:[1,138]},{52:[1,140],60:[1,139]},o($Vx,$VI,{19:[1,143],65:[1,141],73:[1,142]}),{52:$VJ,60:[1,144]},{40:[1,146]},o($VK,[2,102]),{60:[1,147]},{60:[1,148]},{60:[1,149]},{33:150,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{33:151,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{40:$VH,56:70,57:72},{58:$Vz},{6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:[1,152],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},o($Vw,[2,87]),{34:[1,153]},{33:108,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,60:[1,155],81:154,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{60:[1,156]},{60:[1,157]},{33:108,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,60:[1,159],81:158,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{33:160,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{60:[1,161]},{60:[1,162]},{60:[1,163]},{60:[1,164]},{60:[1,165]},{60:[1,166]},{60:[1,167]},o($VD,[2,53]),o($VD,$VE,{58:$VF}),{54:[1,169],58:[1,168]},o($VD,[2,55]),o($Vw,[2,59]),o($Vw,[2,60]),o($Vx,$VL,{54:[1,171],58:[1,170]}),o($Vw,[2,57]),{65:[1,172],73:[1,173]},{27:174,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{2:$V0,4:175,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:$VG,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{27:177,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,80:[1,176]},o($Vw,[2,98]),o($Vx,$VM,{19:[1,178]}),{33:179,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},o($VK,[2,91]),{65:[1,180]},{65:[1,181]},{65:[1,182]},{19:[1,183]},{19:[1,184]},{75:[1,185]},{55:[1,186]},{52:$VJ,60:[1,187]},o($VC,$VI),{19:[1,188]},{19:[1,189]},{52:$VJ,60:[1,190]},{19:[1,191]},o($VC,[2,58]),o($VC,[2,105]),o($VC,[2,106]),o($VC,[2,107]),o($VC,[2,108]),o($VC,[2,109]),o($VC,[2,110]),o($VC,[2,111]),{27:192,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:194,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,54:[1,193],59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{55:[1,195]},{33:196,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{34:[1,197]},{2:$V0,4:198,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:$VG,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{27:200,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,80:[1,199]},{40:[1,201]},{6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:[1,202],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{65:[1,203]},{65:[1,204]},o($Vw,[2,97]),o($VK,[2,101]),{2:$V0,4:205,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:$VG,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{69:206,70:207,71:208,72:$VN,74:$VO},{2:$V0,4:211,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:$VG,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{33:213,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,63:212,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{33:213,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,63:214,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{59:[1,215]},o($VC,$VL,{54:[1,216]}),o($VC,$VM),o($Vw,[2,103]),o($Vw,[2,104]),{19:[1,217]},o($Vw,[2,113]),{54:[1,218]},{33:220,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,51:219,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{19:[1,221]},{58:[1,222]},{19:[1,223]},{55:[1,224]},{6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:[1,225],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{65:[1,226]},{65:[1,227]},o($VK,[2,90]),o($Vw,[2,95]),{2:$V0,4:228,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:$VG,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{2:$V0,4:229,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:$VG,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:[1,230],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{66:[1,232],70:231,71:233,72:$VN,74:$VO},{66:[1,234]},o($VP,[2,80]),{73:[1,235]},{33:236,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:[1,237],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{60:[1,238]},{61:[1,239],62:[1,240]},{60:[1,241]},{33:242,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{34:[1,243]},o($Vw,[2,112]),{33:244,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{52:$VQ,55:[1,245]},o($VR,[2,49]),o($Vw,[2,67]),{27:247,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,54:[1,248]},o($Vw,[2,71]),o($Vx,$VS,{58:[1,249]}),o($Vw,[2,93]),{2:$V0,4:250,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:$VG,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{2:$V0,4:251,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:$VG,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:[1,252],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:[1,253],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},o($Vw,[2,73],{67:[1,254]}),{66:[1,255]},o($Vw,[2,77]),o($VP,[2,79]),o($Vw,[2,78]),{2:$V0,4:256,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:$VG,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{73:[1,257]},o($Vw,[2,83]),{65:[1,258]},{61:[1,259]},{62:[1,260]},{65:[1,261]},{60:[1,262]},{55:[1,263]},{55:[1,264]},{19:[1,265]},{33:266,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{54:[1,267]},{33:220,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,51:269,52:[1,270],53:268,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{33:271,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:[1,272],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:[1,273],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},o($Vw,[2,96]),o($Vw,[2,89]),{11:275,64:$Vg,65:[1,274]},o($Vw,[2,76]),{6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:[2,82],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},o($VP,$VG,{6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,21:19,22:20,23:21,24:22,25:23,26:24,27:25,33:26,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,4:276,2:$V0,18:$V1,20:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,59:$Vf,64:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv}),{2:$V0,4:277,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:$VG,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{60:[2,61]},{60:[2,62]},{2:$V0,4:278,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:$VG,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{19:[1,279]},o($VC,$VS),{19:[1,280]},o($Vw,[2,65]),o($VR,[2,48]),{33:281,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{52:[1,283],55:[1,282]},{52:$VQ,55:[1,284]},{54:[1,285]},{19:[1,286]},o($Vw,[2,94]),o($Vw,[2,88]),{2:$V0,4:287,6:4,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:$VG,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},o($Vw,[2,75]),o($VP,[2,81],{7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,21:19,22:20,23:21,24:22,25:23,26:24,27:25,33:26,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,6:67,18:$V1,20:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,59:$Vf,64:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv}),{6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:[1,288],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},{6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:[1,289],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},o($Vw,[2,86]),o($Vw,[2,63]),{55:[1,290]},{19:[1,291]},{54:[1,292]},{19:[1,293]},{33:220,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,51:294,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},o($Vw,[2,72]),{6:67,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,20:$V2,21:19,22:20,23:21,24:22,25:23,26:24,27:25,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,33:26,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,64:$Vg,66:[1,295],68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv},o($Vw,[2,84]),o($Vw,[2,85]),{54:[1,296]},o($Vw,[2,66]),{33:220,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,51:297,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},o($Vw,[2,68]),{52:$VQ,55:[1,298]},o($Vw,[2,74]),{33:299,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$VA,41:48,42:49,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:57,59:$Vf,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu},{52:$VQ,55:[1,300]},o($VR,[2,51]),{55:[1,301]},o($VR,[2,50]),{19:[1,302]},o($Vw,[2,64])],
defaultActions: {3:[2,2],66:[2,1],259:[2,61],260:[2,62]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple l√≠nea
break;
case 2:// comentario multiple l√≠neas
break;
case 3:return 28
break;
case 4:return 29
break;
case 5:return 30
break;
case 6:return 31
break;
case 7:return 32
break;
case 8:return 36
break;
case 9:return 37
break;
case 10:return 'R_NEW'
break;
case 11:return 64
break;
case 12:return 67
break;
case 13:return 68
break;
case 14:return 72
break;
case 15:return 74
break;
case 16:return 75
break;
case 17:return 76
break;
case 18:return 77
break;
case 19:return 18
break;
case 20:return 20
break;
case 21:return 78
break;
case 22:return 80
break;
case 23:return 82;
break;
case 24:return 83;
break;
case 25:return 84;
break;
case 26:return 85;
break;
case 27:return 86;
break;
case 28:return 87;
break;
case 29:return 88;
break;
case 30:return 89;
break;
case 31:return 90;
break;
case 32:return 91;
break;
case 33:return 73;
break;
case 34:return 19;
break;
case 35:return 65;
break;
case 36:return 66;
break;
case 37:return 59;
break;
case 38:return 60;
break;
case 39:return 54;
break;
case 40:return 55;
break;
case 41:return 52;
break;
case 42:return 61;
break;
case 43:return 62;
break;
case 44:return 'POR';
break;
case 45:return 'DIV';
break;
case 46:return 'POTENCIA';
break;
case 47:return 'MODULO';
break;
case 48:return 58;
break;
case 49:return 'IGUALACION';
break;
case 50:return 'DIFERENCIACION';
break;
case 51:return 'MENORQ';
break;
case 52:return 'MENIGUALQ';
break;
case 53:return 'MAYORQ';
break;
case 54:return 'MAYIGUALQ';
break;
case 55:return 'DIF';
break;
case 56:return 'OR';
break;
case 57:return 'AND';
break;
case 58:return 35;
break;
case 59:return 34;
break;
case 60:return 40;
break;
case 61:return 39;
break;
case 62:return 38;
break;
case 63:return 5;
break;
case 64: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[ \r\t\n\s]+)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}